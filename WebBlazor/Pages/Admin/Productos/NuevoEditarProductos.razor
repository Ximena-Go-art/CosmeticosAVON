@page "/nuevoeditarproductos"
@inject IGenericService<Producto> _productoService
@inject NavigationManager _navigationManager

@if (producto == null)
{
  <p><em>Cargando...</em></p>
}
else
{
  <h3 >@tituloPagina</h3>
    <div style="background-color: @(isEditing ? "lightyellow": "white")">
        <EditForm Model="producto" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
            <div class="container">
                <div class="col-md-5">

                    <div class="form-group">
                        <label class="form-label">Nombre:</label>
                        <InputText class="form-control mb-2" type="Text" @bind-Value="producto.Nombre" />
                    </div>
                    <div class="form-group">
                        <label class="form-label">Precio:</label>
                        <InputNumber class="form-control mb-2" type="Text" @bind-Value="producto.Precio" />
                    </div>
                    <div class="form-group">
                        <label class="form-label">Stock:</label>
                        <InputNumber class="form-control mb-2" type="Text" @bind-Value="producto.Stock" />
                    </div>
                    <div class="form-group">
                        <label class="form-label">Categoría:</label>
                        <InputSelect class="form-control mb-2" @bind-Value="producto.Categoria">
                            @foreach (var categoria in Enum.GetValues<TiposCategoriaEnums>())
                            {
                                <option value="@categoria">@categoria</option>
                            }
                        </InputSelect>
                    </div>
               </div>
                    <ValidationSummary />
                    <button class="btn btn-primary" type="submit">@guardarButtonText</button>
                    <button class="btn btn-danger" @onclick="Cancelar">Cancelar</button>
                </div>
        </EditForm>
    </div>
}


@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public int idProducto { get; set; }
    private Producto? producto;

    private bool isEditing => idProducto != null;
    private string guardarButtonText => isEditing ? "Actualizar" : "Agregar";
    private string tituloPagina => isEditing ? "Editando Producto" : "Agregando nueva Producto";

    protected override async Task OnInitializedAsync()
    {
        if (idProducto != null)
        {
            producto = await _productoService.GetByIdAsync(idProducto);
        }
        else
        {
            producto = new();
        }
    }

    private async Task Guardar()
    {
        //logger.LogInformation(capacitacion.PropertiesToString());
        if (idProducto != null)
            await _productoService.UpdateAsync(producto);
        else
            await _productoService.AddAsync(producto);
        _navigationManager.NavigateTo($"producto");
    }

    private async Task Cancelar()
    {
        _navigationManager.NavigateTo($"producto");
    }
}